#########################################################################################
#                              INVENTARIO HARDWARE PC                                   #         
#########################################################################################
#                                                                                       #
# ESTE SCRIPT CREA UN INVENTARIO DE LOS PC A LOS QUE SE APLIQUE, EXPORTANDO LOS DATOS   #
# POR EQUIPO EN FORMATO CSV. ANEXANDO LA INFORMACION RECOGIDA DE CADA PC.               #
#                                                                                       # 
# EN CASO DE TENER VARIOS DISCOS DUROS NO SE CALCULA EL TAMAÑO DE DISCO (HDD_GB)        #
#                                                                                       #
#########################################################################################
# DEBERÁS CREAR PRIMERO UN ARCHVO CSV EN EL PATH DONDE SE VA A GUARDAR EL ARCHIVO       #
# YA QUE AL SER UN ARCHIVO CON -APPEND SI NO EXISTE EL ARCHIVO DA FALLO                 #
#########################################################################################
# EN LA VARIABLE $export TIENES QUE ESPECIFICAR EL PATH DONDE GUARDARÁ EL CSV           #
#########################################################################################
# GUARDAR EL ARCHIVO INVENTARIO_PC.PS1 EN UN DIRECTORIO DONDE TENGAN ACCESO TODOS LOS   #
# PC QUE DE LOS QUE SE QUIERA HACER INVENTARIO.                                         # 
#########################################################################################

#########################################################################################

# Funcion para traducir ciertos valores

function Decode {
    If ($args[0] -is [System.Array]) {
        [System.Text.Encoding]::ASCII.GetString($args[0])
    }
    Else {
        "Not Found"
    }
}


# Recoger informacion del PC

$computerSystem = Get-WmiObject Win32_ComputerSystem
$computerBIOS = Get-WmiObject Win32_BIOS
$ccomputerOS = Get-WmiObject Win32_OperatingSystem
$computerCPU = Get-WmiObject Win32_Processor
$computerHDD = Get-WmiObject Win32_LogicalDisk -Filter drivetype=3 # REVISAR
$computerDiskDrive = Get-WMIObject win32_diskdrive
$computerNET = Get-WmiObject win32_networkadapterconfiguration -Filter IPEnabled=TRUE | select macaddress
$Monitor = gwmi WmiMonitorID -Namespace root\wmi


# CREAR CSV con los datos extraidos

$csvObject = New-Object PSObject -property @{
'Equipo' = $computerSystem.Name
'Marca' = $computerSystem.Manufacturer
'Modelo' = $computerSystem.Model
'CPU' = $computerCPU.Name
'RAM' = "{0:N2}" -f ($computerSystem.TotalPhysicalMemory/1GB)
'HDD_GB' = '{0:d} GB' -f [int]($computerDiskDrive.Size/1GB)
'HDD_MARCA' = $computerDiskDrive.Model
'HDD_SERIAL' = $computerDiskDrive.SerialNumber
'NumSerie' = $computerBIOS.SerialNumber
'BIOS' = $computerBIOS.SMBIOSBIOSVersion
'Eth' = $computerNET
'Monitor_Marca' = Decode $Monitor.ManufacturerName -notmatch 0
'Monitor_Nombre' = Decode $Monitor.UserFriendlyName -notmatch 0
'Monitor_Serial' = Decode $Monitor.SerialNumberID -notmatch 0

 }

# Directorio de exportación de archivo
# Escriba el PATH del archivo csv

$export = 'PATH_AL_ARCHIVO\inventario.csv'

# Exportar campos a csv
# Al ser un archivo al que se añaden datos, previamente crear el archivo CSV en el directorio donde se va a guardar, si no dará fallo y no creará el archivo

$csvObject | Select Equipo, Marca, Modelo, CPU, RAM, NumSerie, BIOS, Eth, HDD_GB, HDD_MARCA, HDD_SERIAL, Monitor_Marca, Monitor_Nombre, Monitor_Serial | Export-Csv $export -NoTypeInformation -Append
